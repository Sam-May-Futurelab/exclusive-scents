{% comment %}
  TikTok Grid â€” Modal player with auto-thumbnails
  - Pulls thumbnails via TikTok oEmbed (JSONP)
  - Plays inside modal using TikTok iframe (/embed/v2/video/{id}) when possible
  - Falls back to blockquote+embed.js, and finally new-tab if embed is blocked
  - Optional custom thumbnail per block overrides auto thumb
{% endcomment %}

<section id="tt-grid-{{ section.id }}" class="tt-wrap">
  <style>
    #tt-grid-{{ section.id }}{
      --tt-bg: {{ section.settings.bg | default: '#ffffff' }};
      --tt-gap: {{ section.settings.gap | default: 6 }}px;
      --tt-radius: {{ section.settings.radius | default: 10 }}px;
      --tt-btn: #1299f3; --tt-btn-tx:#fff;
      padding: {{ section.settings.pad_y | default: 24 }}px 0;
      background: var(--tt-bg);
    }
    .tt-container{ max-width: {{ section.settings.max_w | default: 1200 }}px; margin:0 auto; padding:0 16px; }
    .tt-head{ display:flex; align-items:flex-end; justify-content:space-between; gap:14px; margin:0 0 14px; }
    .tt-title{ font-size: clamp(22px,2.4vw,28px); font-weight:800; letter-spacing:-.02em; }
    .tt-sub{ color:#6b7280; max-width:70ch; }

    .tt-grid{ display:grid; gap:var(--tt-gap); grid-template-columns: repeat(2, 1fr); }
    @media (min-width: 640px){ .tt-grid{ grid-template-columns: repeat(3, 1fr);} }
    @media (min-width: 1024px){ .tt-grid{ grid-template-columns: repeat(4, 1fr);} }

    .tt-card{
      position:relative; display:block; width:100%; aspect-ratio:1/1;
      border-radius:var(--tt-radius); overflow:hidden; cursor:pointer; background:#0f172a;
    }
    @supports not (aspect-ratio:1/1){ .tt-card::before{ content:""; display:block; padding-top:100%; } }

    /* media layer + skeleton */
    .tt-media{ position:absolute; inset:0; background:#0f172a; background-size:cover; background-position:center; }
    .tt-skel{ position:absolute; inset:0; background:linear-gradient(135deg,#111827,#0b1220); }
    .tt-skel::after{
      content:""; position:absolute; inset:0;
      background:linear-gradient(90deg, transparent, rgba(255,255,255,.08), transparent);
      transform:translateX(-100%); animation:tt-shimmer 1.4s infinite;
    }
    @keyframes tt-shimmer{ to{ transform:translateX(100%);} }

    .tt-grad{ position:absolute; inset:0; background: linear-gradient(180deg, rgba(0,0,0,.00) 40%, rgba(0,0,0,.25) 100%); }

    .tt-play{
      position:absolute; left:50%; top:50%; transform:translate(-50%,-50%);
      display:grid; place-items:center; width:56px; height:56px; border-radius:999px;
      background:rgba(0,0,0,.55); border:1px solid rgba(255,255,255,.25); color:#fff;
    }
    .tt-play svg{ width:20px; height:20px; margin-left:2px; }

    .tt-badge{
      position:absolute; right:8px; top:8px;
      display:inline-flex; align-items:center; gap:6px; padding:6px 8px;
      font-size:12px; font-weight:800; color:#fff;
      background: rgba(0,0,0,.55); border:1px solid rgba(255,255,255,.18);
      border-radius:999px; backdrop-filter:saturate(120%) blur(6px);
    }
    .tt-badge svg{ width:14px; height:14px; }

    .tt-cta{ display:flex; justify-content:center; margin-top:18px; }
    .tt-cta a{
      display:inline-flex; align-items:center; gap:10px;
      background: var(--tt-btn); color: var(--tt-btn-tx);
      padding: 10px 16px; border-radius: 10px; font-weight:800;
      box-shadow: 0 10px 30px rgba(0,0,0,.08);
    }
    .tt-cta svg{ width:18px; height:18px; }

    /* Modal */
    .tt-modal{ position:fixed; inset:0; background:rgba(0,0,0,.6); display:none; place-items:center; z-index: 9999; padding:20px; }
    .tt-modal.is-open{ display:grid; }
    .tt-box{ width:min(920px, 92vw); background:#000; border-radius:14px; overflow:hidden; position:relative; box-shadow:0 20px 60px rgba(0,0,0,.45); }
    .tt-close{
      position:absolute; top:8px; right:8px; z-index:2; width:36px; height:36px; display:grid; place-items:center;
      border-radius:999px; background: rgba(255,255,255,.15); color:#fff; border:1px solid rgba(255,255,255,.25); cursor:pointer;
    }
    .tt-embed{ background:#000; aspect-ratio:9/16; width:100%; }
    @supports not (aspect-ratio: 9/16){
      .tt-embed{ position:relative; padding-top:177.78%; }
      .tt-embed > *{ position:absolute; inset:0; width:100%; height:100%; }
    }
  </style>

  <div class="tt-container">
    {% if section.settings.heading != blank or section.settings.subhead != blank %}
      <div class="tt-head">
        {% if section.settings.heading != blank %}<h2 class="tt-title">{{ section.settings.heading }}</h2>{% endif %}
        {% if section.settings.subhead != blank %}<div class="tt-sub">{{ section.settings.subhead }}</div>{% endif %}
      </div>
    {% endif %}

    <div class="tt-grid">
      {% for block in section.blocks %}
        {% assign url = block.settings.tiktok_url | strip %}
        {% assign thumb = block.settings.thumb | image_url: width: 800 | default: '' %}
        <button type="button" class="tt-card"
                data-url="{{ url | escape }}"
                data-custom-thumb="{{ thumb | escape }}"
                aria-label="Play TikTok video {{ forloop.index }}">
          <span class="tt-media" style="background-image:url('');"></span>
          <span class="tt-skel" aria-hidden="true"></span>
          <span class="tt-grad" aria-hidden="true"></span>
          <span class="tt-play" aria-hidden="true">
            <svg viewBox="0 0 24 24" fill="currentColor"><path d="M8 5v14l11-7z"/></svg>
          </span>
          <span class="tt-badge" aria-hidden="true">
            <svg viewBox="0 0 24 24" fill="currentColor"><path d="M12.9 2.1c.3 2.6 1.8 4.3 4.3 4.6v2.6c-1.7.2-3.1-.3-4.6-1.3v6.4c0 4-2.6 5.6-5.2 5.6-2.6 0-5-1.9-5-5 0-3 2.2-4.7 4.8-4.9v2.7c-1.3.2-2.1 1-2.1 2.2 0 1.3 1 2.3 2.5 2.3 1.6 0 2.6-1 2.6-2.9V2.1h2.7z"/></svg>
            TikTok
          </span>
        </button>
      {% endfor %}
    </div>

    {% if section.settings.cta_label != blank and section.settings.cta_url != blank %}
      <div class="tt-cta">
        <a href="{{ section.settings.cta_url }}" target="_blank" rel="noopener">
          <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M12.9 2.1c.3 2.6 1.8 4.3 4.3 4.6v2.6c-1.7.2-3.1-.3-4.6-1.3v6.4c0 4-2.6 5.6-5.2 5.6-2.6 0-5-1.9-5-5 0-3 2.2-4.7 4.8-4.9v2.7c-1.3.2-2.1 1-2.1 2.2 0 1.3 1 2.3 2.5 2.3 1.6 0 2.6-1 2.6-2.9V2.1h2.7z"/></svg>
          {{ section.settings.cta_label }}
        </a>
      </div>
    {% endif %}
  </div>

  <!-- Modal -->
  <div class="tt-modal" data-modal>
    <div class="tt-box">
      <button class="tt-close" data-close aria-label="Close">
        <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2"><path d="M18 6 6 18M6 6l12 12"/></svg>
      </button>
      <div class="tt-embed" data-embed></div>
    </div>
  </div>

  <script>
  (function(){
    const root = document.getElementById('tt-grid-{{ section.id }}');
    if(!root) return;

    const cards = Array.from(root.querySelectorAll('.tt-card'));
    const modal = root.querySelector('[data-modal]');
    const embedBox = root.querySelector('[data-embed]');
    const closeBtn = root.querySelector('[data-close]');
    let embedScriptLoaded = false;

    function jsonp(url){
      return new Promise((resolve, reject) => {
        const cb = 'ttcb_' + Math.random().toString(36).slice(2);
        window[cb] = (data) => { resolve(data); cleanup(); };
        function cleanup(){ try{ delete window[cb]; }catch(e){} script.remove(); }
        const script = document.createElement('script');
        script.src = url + (url.includes('?')?'&':'?') + 'callback=' + cb;
        script.onerror = () => { cleanup(); reject(new Error('JSONP failed')); };
        document.head.appendChild(script);
      });
    }

    function ensureTikTokScript(){
      return new Promise(res=>{
        if(embedScriptLoaded || window.tiktok){ embedScriptLoaded = true; return res(); }
        const s = document.createElement('script');
        s.src = 'https://www.tiktok.com/embed.js';
        s.async = true;
        s.onload = ()=>{ embedScriptLoaded = true; res(); };
        document.body.appendChild(s);
      });
    }

    function extractVideoId(str){
      const m = String(str||'').match(/\/video\/(\d+)/);
      return m ? m[1] : null;
    }

    function setThumb(card, url){
      const custom = card.getAttribute('data-custom-thumb');
      const media = card.querySelector('.tt-media');
      const skel = card.querySelector('.tt-skel');

      if(custom){
        media.style.backgroundImage = 'url(\"'+custom+'\")
        ';
        skel.style.display = 'none';
        return Promise.resolve({ videoId: extractVideoId(url), html: null });
      }

      // fetch via oEmbed (JSONP) to get thumbnail/canonical url
      return jsonp('https://www.tiktok.com/oembed?url=' + encodeURIComponent(url))
        .then(data=>{
          if(data && data.thumbnail_url){
            media.style.backgroundImage = 'url(\"'+data.thumbnail_url+'\")';
            skel.style.display = 'none';
          }
          const vid = extractVideoId(data && (data.html || data.author_url || url)) || extractVideoId(url);
          return { videoId: vid, html: data ? data.html : null };
        })
        .catch(()=>{
          // graceful fallback gradient
          media.style.background = 'linear-gradient(135deg,#1f2937,#0f172a)';
          skel.style.display = 'none';
          return { videoId: extractVideoId(url), html: null };
        });
    }

    function openModalWith(url, videoId, oembedHtml){
      modal.classList.add('is-open');
      embedBox.innerHTML = '';

      if(videoId){
        const ifr = document.createElement('iframe');
        ifr.setAttribute('allow', 'autoplay; clipboard-write; encrypted-media; picture-in-picture');
        ifr.setAttribute('allowfullscreen','true');
        ifr.setAttribute('title','TikTok video');
        ifr.style.width = '100%'; ifr.style.height = '100%'; ifr.style.border = '0';
        ifr.src = 'https://www.tiktok.com/embed/v2/video/' + videoId + '?lang=en-US&autoplay=1';
        embedBox.appendChild(ifr);
        return;
      }

      // Fallback to blockquote embed if id couldn't be parsed
      const bq = document.createElement('blockquote');
      bq.className = 'tiktok-embed';
      bq.setAttribute('cite', url);
      bq.style.maxWidth = '720px';
      bq.style.minWidth = '320px';
      bq.innerHTML = '<section></section>';
      embedBox.appendChild(bq);

      ensureTikTokScript().then(()=>{
        try{ if(window.tiktok && window.tiktok.embeds && window.tiktok.embeds.load){ window.tiktok.embeds.load(); } }catch(e){}
        // If still no iframe after a moment, open in new tab
        setTimeout(()=>{ if(!embedBox.querySelector('iframe')){ window.open(url,'_blank'); closeModal(); } }, 3500);
      });
    }

    function closeModal(){
      modal.classList.remove('is-open');
      embedBox.innerHTML = '';
    }

    // Prepare thumbnails first, then bind clicks
    const metaPromises = cards.map(card=>{
      const url = card.getAttribute('data-url');
      return setThumb(card, url).then(meta => { card.dataset.videoId = meta.videoId || ''; });
    });

    Promise.allSettled(metaPromises).then(()=>{
      cards.forEach(card=>{
        card.addEventListener('click', ()=>{
          const url = card.getAttribute('data-url');
          const vid = card.dataset.videoId || extractVideoId(url);
          openModalWith(url, vid, null);
        });
      });
    });

    closeBtn.addEventListener('click', closeModal);
    modal.addEventListener('click', (e)=>{ if(e.target === modal) closeModal(); });
    document.addEventListener('keydown', (e)=>{ if(e.key === 'Escape') closeModal(); });
  })();
  </script>
</section>

{% schema %}
{
  "name": "TikTok Grid ",
  "class": "section",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "Follow our latest" },
    { "type": "text", "id": "subhead", "label": "Subtitle", "default": "New drops, behind the scenes, and community moments." },
    { "type": "range", "id": "max_w", "label": "Max width (px)", "min": 800, "max": 1600, "step": 20, "default": 1200 },
    { "type": "range", "id": "gap", "label": "Grid gap (px)", "min": 2, "max": 16, "step": 1, "default": 6 },
    { "type": "range", "id": "radius", "label": "Card radius (px)", "min": 0, "max": 22, "step": 1, "default": 10 },
    { "type": "range", "id": "pad_y", "label": "Vertical padding", "min": 0, "max": 80, "step": 2, "default": 24 },
    { "type": "color", "id": "bg", "label": "Background", "default": "#ffffff" },
    { "type": "text", "id": "cta_label", "label": "Button label", "default": "Follow on TikTok" },
    { "type": "url", "id": "cta_url", "label": "Button URL" }
  ],
  "blocks": [
    {
      "type": "video",
      "name": "TikTok video",
      "settings": [
        { "type": "text", "id": "tiktok_url", "label": "TikTok URL", "info": "Paste any TikTok link (vm short links OK)." },
        { "type": "image_picker", "id": "thumb", "label": "Custom thumbnail (optional)" }
      ]
    }
  ],
  "presets": [
    {
      "name": "TikTok Grid (Modal, Thumbnails)",
      "blocks": [
        { "type": "video", "settings": { "tiktok_url": "https://vm.tiktok.com/ZNdqxtoT6/" } },
        { "type": "video", "settings": { "tiktok_url": "https://vm.tiktok.com/ZNdq93vK4/" } },
        { "type": "video", "settings": { "tiktok_url": "https://vm.tiktok.com/ZNdq9bJQx/" } },
        { "type": "video", "settings": { "tiktok_url": "https://vm.tiktok.com/ZNdq9VLWH/" } },
        { "type": "video", "settings": { "tiktok_url": "https://vm.tiktok.com/ZNdq93TCS/" } },
        { "type": "video", "settings": { "tiktok_url": "https://vm.tiktok.com/ZNdq9gyp4/" } },
        { "type": "video", "settings": { "tiktok_url": "https://vm.tiktok.com/ZNdq9x9r8/" } },
        { "type": "video", "settings": { "tiktok_url": "https://vm.tiktok.com/ZNdq97myB/" } },
        { "type": "video", "settings": { "tiktok_url": "https://vm.tiktok.com/ZNdq9tgnK/" } }
      ]
    }
  ]
}
{% endschema %}
