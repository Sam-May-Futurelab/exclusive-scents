{% comment %}
  TikTok Reviews Slideshow (stable, one-at-a-time)
  - Add up to 50 review images as blocks
  - Smooth, snap-based carousel with optional autoplay
  - Pauses on hover and when tab hidden; respects reduced motion
{% endcomment %}

<section class="tt-reviews {{ section.settings.section_class }}" id="tt-reviews-{{ section.id }}" data-section-id="{{ section.id }}">
  <div class="tt-reviews__inner page-width">
    <header class="tt-reviews__head">
      <h2 class="tt-reviews__title">
        {{ section.settings.title | default: "Check out our TikTok reviews — 100+ (5★) Reviews" }}
      </h2>
      {% if section.settings.subtext != blank %}
        <p class="tt-reviews__subtext">{{ section.settings.subtext }}</p>
      {% endif %}
    </header>

    <div class="tt-reviews__viewport" role="region" aria-label="TikTok reviews carousel">
      {% if section.settings.show_arrows %}
      <button class="tt-reviews__nav tt-reviews__nav--prev" aria-label="Previous review" type="button">
        <span aria-hidden="true">‹</span>
      </button>
      {% endif %}

      <ul class="tt-reviews__track"
          data-autoplay="{{ section.settings.autoplay | json }}"
          data-interval="{{ section.settings.autoplay_interval | default: 3500 }}"
          data-loop="{{ section.settings.loop | json }}">
        {% for block in section.blocks %}
          {% if block.type == 'review' %}
          <li class="tt-reviews__slide" {{ block.shopify_attributes }}>
            <figure class="tt-reviews__card">
              {% if block.settings.image != blank %}
                {% assign img = block.settings.image %}
                <img
                  class="tt-reviews__img"
                  src="{{ img | image_url: width: 1200 }}"
                  srcset="
                    {{ img | image_url: width: 600 }} 600w,
                    {{ img | image_url: width: 900 }} 900w,
                    {{ img | image_url: width: 1200 }} 1200w
                  "
                  sizes="(max-width: 740px) 100vw, 720px"
                  alt="{{ block.settings.alt | escape }}"
                  loading="lazy"
                  decoding="async"
                >
              {% else %}
                <div class="tt-reviews__placeholder" aria-hidden="true">Add review image</div>
              {% endif %}

              {% if section.settings.show_stars %}
              <div class="tt-reviews__stars" aria-hidden="true">★★★★★</div>
              {% endif %}

              {% if block.settings.caption != blank %}
              <figcaption class="tt-reviews__caption">
                {{ block.settings.caption }}
              </figcaption>
              {% endif %}
            </figure>
          </li>
          {% endif %}
        {% endfor %}
      </ul>

      {% if section.settings.show_arrows %}
      <button class="tt-reviews__nav tt-reviews__nav--next" aria-label="Next review" type="button">
        <span aria-hidden="true">›</span>
      </button>
      {% endif %}
    </div>

    {% if section.settings.show_dots %}
    <div class="tt-reviews__dots" aria-hidden="true"></div>
    {% endif %}
  </div>

  <style>
    .tt-reviews {
      --card-radius: {{ section.settings.radius | default: 16 }}px;
      --shadow: 0 8px 24px rgba(0,0,0,0.08);
      --edge: color-mix(in oklab, #000 6%, #fff);
      --txt: #111827;
      --muted: #6b7280;
      --dot: #d1d5db;
      --dot-active: #111;
    }
    .tt-reviews__inner { padding: clamp(12px, 2vw, 16px) 0; }
    .tt-reviews__head { margin-bottom: 10px; }
    .tt-reviews__title {
      font-size: clamp(20px, 2.1vw, 28px);
      line-height: 1.15;
      font-weight: 700;
      letter-spacing: -.01em;
      color: var(--txt);
    }
    .tt-reviews__subtext {
      color: var(--muted);
      margin-top: 6px;
      font-size: 14px;
    }

    .tt-reviews__viewport {
      position: relative;
      overflow: hidden;
      padding: 8px 0;
    }

    .tt-reviews__track {
      --gap: 14px;
      display: grid;
      grid-auto-flow: column;
      grid-auto-columns: 100%;
      gap: var(--gap);
      overflow-x: auto;
      scroll-snap-type: x mandatory;
      scroll-behavior: smooth;
      -webkit-overflow-scrolling: touch;
      padding: 6px;
      margin: 0;
      list-style: none;
    }

    @media (min-width: 900px){
      .tt-reviews__track { grid-auto-columns: min(720px, 90%); }
    }

    .tt-reviews__track::-webkit-scrollbar{ height: 8px; }
    .tt-reviews__track::-webkit-scrollbar-thumb{
      background: #e5e7eb; border-radius: 8px;
    }

    .tt-reviews__slide {
      scroll-snap-align: center;
      scroll-snap-stop: always;
    }

    .tt-reviews__card {
      position: relative;
      border-radius: var(--card-radius);
      overflow: hidden;
      background: #fff;
      box-shadow: var(--shadow);
      border: 1px solid var(--edge);
    }

    /* Maintain a friendly rectangle even if images vary */
    .tt-reviews__img {
      width: 100%;
      height: auto;
      display: block;
      aspect-ratio: {{ section.settings.aspect_w | default: 4 }} / {{ section.settings.aspect_h | default: 3 }};
      object-fit: cover;
      transform: translateZ(0);
      will-change: transform;
      transition: transform 260ms ease;
    }

    .tt-reviews__card:hover .tt-reviews__img { transform: scale(1.01); }

    .tt-reviews__placeholder {
      display:flex; align-items:center; justify-content:center;
      min-height: 300px;
      background: #f3f4f6;
      color: #9ca3af;
      font-size: 14px;
    }

    .tt-reviews__stars {
      position: absolute;
      left: 12px; top: 12px;
      padding: 6px 10px;
      border-radius: 999px;
      background: rgba(255,255,255,0.92);
      box-shadow: 0 4px 14px rgba(0,0,0,.06);
      font-weight: 700;
      font-size: 13px;
      letter-spacing: .02em;
    }

    .tt-reviews__caption {
      position: absolute;
      left: 0; right: 0; bottom: 0;
      padding: 10px 12px;
      color: #fff;
      font-size: 14px;
      line-height: 1.25;
      background: linear-gradient(to top, rgba(0,0,0,.55), rgba(0,0,0,0));
    }

    .tt-reviews__nav {
      position: absolute; top: 50%; transform: translateY(-50%);
      z-index: 2;
      border: 0; background: rgba(255,255,255,0.9);
      width: 38px; height: 38px;
      border-radius: 999px;
      box-shadow: var(--shadow);
      display:grid; place-items:center;
      cursor:pointer;
    }
    .tt-reviews__nav--prev { left: 8px; }
    .tt-reviews__nav--next { right: 8px; }
    .tt-reviews__nav:hover { background: #fff; }

    .tt-reviews__dots { display:flex; gap:8px; justify-content:center; margin-top: 10px; }
    .tt-reviews__dots button{
      width:8px; height:8px; border-radius:999px; border:0;
      background: var(--dot); cursor:pointer;
    }
    .tt-reviews__dots button[aria-current="true"]{ background: var(--dot-active); width: 18px; border-radius: 6px; }

    @media (prefers-reduced-motion: reduce){
      .tt-reviews__track { scroll-behavior: auto; }
      .tt-reviews__img { transition: none; }
    }
  </style>

  <script>
    (() => {
      const section = document.getElementById("tt-reviews-{{ section.id }}");
      if (!section) return;

      const viewport = section.querySelector(".tt-reviews__viewport");
      const track = section.querySelector(".tt-reviews__track");
      const slides = Array.from(section.querySelectorAll(".tt-reviews__slide"));
      if (!track || slides.length === 0) return;

      const btnPrev = section.querySelector(".tt-reviews__nav--prev");
      const btnNext = section.querySelector(".tt-reviews__nav--next");
      const dotsWrap = section.querySelector(".tt-reviews__dots");

      // Build dots if enabled
      const buildDots = () => {
        if (!dotsWrap) return [];
        dotsWrap.innerHTML = "";
        return slides.map((_, i) => {
          const b = document.createElement("button");
          b.type = "button";
          b.setAttribute("aria-label", "Go to review " + (i+1));
          b.addEventListener("click", () => goTo(i, true));
          dotsWrap.appendChild(b);
          return b;
        });
      };
      const dots = buildDots();

      let index = 0;
      const clamp = (n, min, max) => Math.max(min, Math.min(max, n));
      const loop = track.dataset.loop === "true";
      const autoplay = track.dataset.autoplay === "true";
      const interval = parseInt(track.dataset.interval || "3500", 10);

      const snapTo = (i) => {
        const el = slides[i];
        el?.scrollIntoView({ behavior: "smooth", inline: "center", block: "nearest" });
        setDots(i);
      };

      const setDots = (i) => {
        if (!dots.length) return;
        dots.forEach((d, di) => d.setAttribute("aria-current", di === i ? "true" : "false"));
      };

      const goTo = (i, user) => {
        if (!loop) index = clamp(i, 0, slides.length - 1);
        else {
          if (i < 0) index = slides.length - 1;
          else if (i >= slides.length) index = 0;
          else index = i;
        }
        snapTo(index);
        if (user) resetAutoplay();
      };

      const next = () => goTo(index + 1, false);
      const prev = () => goTo(index - 1, false);

      btnNext?.addEventListener("click", next);
      btnPrev?.addEventListener("click", prev);

      // Keep index in sync when user swipes
      const io = new IntersectionObserver((entries) => {
        entries.forEach((e) => {
          if (e.isIntersecting && e.intersectionRatio > 0.6) {
            const newIndex = slides.indexOf(e.target);
            if (newIndex !== -1) {
              index = newIndex;
              setDots(index);
            }
          }
        });
      }, { root: track, threshold: [0.6] });
      slides.forEach(slide => io.observe(slide));

      // Autoplay - stable, pauses on hover & when hidden
      let timer = null;
      const startAutoplay = () => {
        if (!autoplay || window.matchMedia("(prefers-reduced-motion: reduce)").matches) return;
        stopAutoplay();
        timer = setInterval(() => {
          const isScrolling = track.matches(":active");
          if (document.hidden || isScrolling) return;
          next();
        }, Math.max(1500, interval));
      };
      const stopAutoplay = () => { if (timer) { clearInterval(timer); timer = null; } };
      const resetAutoplay = () => { stopAutoplay(); startAutoplay(); };

      viewport?.addEventListener("mouseenter", stopAutoplay);
      viewport?.addEventListener("mouseleave", startAutoplay);
      document.addEventListener("visibilitychange", () => {
        if (document.hidden) stopAutoplay(); else startAutoplay();
      });

      // Initialize
      setDots(0);
      startAutoplay();
      requestAnimationFrame(() => snapTo(0));
    })();
  </script>

  {% schema %}
  {
    "name": "TikTok Reviews Slideshow",
    "tag": "section",
    "class": "tiktok-reviews-carousel",
    "settings": [
      { "type": "text", "id": "title", "label": "Title", "default": "Check out our TikTok reviews — 100+ (5★) Reviews" },
      { "type": "textarea", "id": "subtext", "label": "Subtext" },
      { "type": "checkbox", "id": "show_stars", "label": "Show star badge", "default": true },
      { "type": "checkbox", "id": "show_arrows", "label": "Show arrows", "default": true },
      { "type": "checkbox", "id": "show_dots", "label": "Show dots", "default": true },
      { "type": "checkbox", "id": "autoplay", "label": "Autoplay", "default": true },
      { "type": "range", "id": "autoplay_interval", "label": "Autoplay interval (ms)", "min": 1500, "max": 8000, "step": 100, "default": 3500 },
      { "type": "checkbox", "id": "loop", "label": "Loop slides", "default": true },
      { "type": "range", "id": "radius", "label": "Card corner radius", "min": 8, "max": 28, "step": 1, "default": 16 },
      { "type": "number", "id": "aspect_w", "label": "Aspect width", "default": 4 },
      { "type": "number", "id": "aspect_h", "label": "Aspect height", "default": 3 },
      { "type": "text", "id": "section_class", "label": "Custom CSS class" }
    ],
    "blocks": [
      {
        "type": "review",
        "name": "Review image",
        "settings": [
          { "type": "image_picker", "id": "image", "label": "Review screenshot (rectangle)" },
          { "type": "text", "id": "alt", "label": "Alt text (accessibility)", "default": "Customer TikTok review" },
          { "type": "text", "id": "caption", "label": "Caption (optional)" }
        ]
      }
    ],
    "max_blocks": 50,
    "presets": [
      { "name": "TikTok Reviews Slideshow", "category": "Testimonials" }
    ]
  }
  {% endschema %}
</section>
